const contactModel = require('../models/contactModel');

function findParentId(id, idToContactMapping) {
    const contact = idToContactMapping[id];
    if (contact.linkPrecendence === "primary") {
        return id;
    }
    return findParentId(contact.linkedId, idToContactMapping);
}

function findPrimaryContactIdOfEmail(email, allContacts, idToContactMapping) {
    if (!email) {
        return null;
    }
    const activeContactsWithSameEmail = allContacts
        .filter(contact => !contact.deletedAt)
        .filter(contact => contact.email === email);
    if (activeContactsWithSameEmail.length === 0) {
        return null;
    }
    return findParentId(activeContactsWithSameEmail[0].id, idToContactMapping);
}

function findPrimaryContactIdOfPhoneNumber(phoneNumber, allContacts, idToContactMapping) {
    if (!phoneNumber) {
        return null;
    }
    const activeContactsWithSamePhoneNumber = allContacts
        .filter(contact => !contact.deletedAt)
        .filter(contact => contact.phoneNumber === phoneNumber);

    if (activeContactsWithSamePhoneNumber.length === 0) {
        return null;
    }
    return findParentId(activeContactsWithSamePhoneNumber[0].id, idToContactMapping);
}


function findContactsWithPrimaryContactId(primaryContactId, allContacts, idToContactMapping) {
    const sameContacts = allContacts.filter(contact => findParentId(contact.id, idToContactMapping) === primaryContactId);

    const linkPrecendenceOrder = ["primary", "secondary"];
    sameContacts.sort((a, b) => linkPrecendenceOrder.indexOf(a.linkPrecendence) - linkPrecendenceOrder.indexOf(b.linkPrecendence));

    // check first contact is primary key
    if (sameContacts[0].linkPrecendence !== "primary") {
        throw "oldest contact is not primary contact";
    }

    return sameContacts;
}

// inserts an item in cache
function insertNewItem(email, phoneNumber, linkedId, allContacts, idToContactMapping) {
    const timeNow = Date.now();
    const id = allContacts.length + 1;

    let contact = {
        id: id,
        email: email,
        phoneNumber: phoneNumber,
        linkedId: linkedId,
        linkPrecendence: (linkedId ? "secondary" : "primary"),
        createdAt: timeNow,
        updatedAt: timeNow,
        deletedAt: null
    };

    allContacts.push(contact);
    idToContactMapping[contact.id] = contact;
    // add debug
    return contact;
};

exports.postIdentity = function (req, res, next) {
    let { email, phoneNumber } = req.body;
    const validationError = validateInput(email, phoneNumber);
    if (validationError) {
        return res.status(400)
            .json({
                "error": validationError
            });
    }

    let allContacts = contactModel.getAllContacts();

    let idToContactMapping = {};

    allContacts.forEach(contact => {
        idToContactMapping[contact.id] = contact;
    });



    const emailPrimaryId = findPrimaryContactIdOfEmail(email, allContacts, idToContactMapping);
    const phoneNumberPrimaryId = findPrimaryContactIdOfPhoneNumber(phoneNumber, allContacts, idToContactMapping);

    let finalPrimaryContactId = null;

    if (!emailPrimaryId && !phoneNumberPrimaryId) {
        // create a primary contact
        finalPrimaryContactId = insertNewItem(email, phoneNumber, null, allContacts, idToContactMapping).id;
    }
    else if (emailPrimaryId && !phoneNumberPrimaryId) {
        if (phoneNumber) { // only insert for new phone number
            insertNewItem(email, phoneNumber, emailPrimaryId, allContacts, idToContactMapping);
        }
        finalPrimaryContactId = emailPrimaryId;
    }
    else if (!emailPrimaryId && phoneNumberPrimaryId) {
        if (email) {
            insertNewItem(email, phoneNumber, phoneNumberPrimaryId, allContacts, idToContactMapping);
        }
        finalPrimaryContactId = phoneNumberPrimaryId;
    }
    else { // both email and phone number's primaryId present

        // oldest one will be treated as primary
        if (emailPrimaryId !== phoneNumberPrimaryId) {
            const creationTimeOfPhoneNumber = idToContactMapping[phoneNumberPrimaryId].createdAt;
            const creationTimeOfEmail = idToContactMapping[emailPrimaryId].createdAt;

            if (creationTimeOfEmail < creationTimeOfPhoneNumber) {
                idToContactMapping[phoneNumberPrimaryId].linkedId = emailPrimaryId;
                idToContactMapping[phoneNumberPrimaryId].linkPrecendence = "secondary";

                // insert the new item with primary contact as emailPrimaryKeyId
                finalPrimaryContactId = emailPrimaryId;
            } else {
                idToContactMapping[emailPrimaryId].linkedId = phoneNumberPrimaryId;
                idToContactMapping[emailPrimaryId].linkPrecendence = "secondary";

                // insert the new item with primary contact as emailPrimaryKeyId
                finalPrimaryContactId = phoneNumberPrimaryId;
            }
        } else {
            finalPrimaryContactId = emailPrimaryId;
        }
    }

    const sameContacts = findContactsWithPrimaryContactId(finalPrimaryContactId, allContacts, idToContactMapping);


    const sameContactsEmail = sameContacts
        .filter(contact => contact.email)
        .map(contact => contact.email);

    const sameContactsPhoneNumber = sameContacts
        .filter(contact => contact.phoneNumber)
        .map(contact => contact.phoneNumber);

    const secondaryContactIds = sameContacts
        .filter(contact => contact.linkPrecendence === "secondary")
        .map(contact => contact.id);

    contactModel.setContacts(allContacts);
    res.json({
        "contacts": {
            "primaryContactId": finalPrimaryContactId,
            "emails": sameContactsEmail,
            "phoneNumbers": sameContactsPhoneNumber,
            "secondaryContactIds": secondaryContactIds
        }
    });
};

exports.getIdentity = function (req, res, next) {
    return res.json({
        "contacts": contactModel.getAllContacts()
    });

};

exports.deleteIdentity = function (req, res, next) {
    contactModel.setContacts([]);
    return res.json({
        "message": "deleted all contacts, successfully"
    });
};

function validateInput(email, phoneNumber) {
    // validate
    if (!email && !phoneNumber) {
        return "at least email or phoneNumber required";
    }

    if (email) {
        if (typeof email != "string") {
            return "email should be of type string";
        }
    }

    if (phoneNumber) {
        if (typeof phoneNumber != "string") {
            return "email should be of type string";
        }
    }
}
